"""
Django settings for device_api project.

Generated by 'django-admin startproject' using Django 3.2.8.

For more information on this file, see
https://docs.djangoproject.com/en/3.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.2/ref/settings/
"""
import os
from datetime import timedelta
from pathlib import Path
import logging
import mongoengine

logger = logging.getLogger(__name__)

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.2/howto/deployment/checklist/


# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get('SECRET_KEY')

if not SECRET_KEY:
    logger.critical(f"Django secret key must be defined in os environment")
    exit(-1)

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.environ.get('DEBUG', True)

ALLOWED_HOSTS = ['*']

# Users & Authentication
AUTH_USER_MODEL = 'users.User'

# Application definition

# APPS
# ------------------------------------------------------------------------------
DJANGO_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
]

THIRD_PARTY_APPS = ['rest_framework', 'corsheaders', 'drf_yasg', 'django_filters', 'rest_framework_simplejwt',
                    'rest_framework_simplejwt.token_blacklist']


LOCAL_APPS = [
    "users.apps.UsersConfig",
    'devices.apps.DeviceAppConfig',
    'device_api.celery_cfg.CeleryAppConfig'

]

INSTALLED_APPS = DJANGO_APPS + THIRD_PARTY_APPS + LOCAL_APPS
MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'device_api.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'device_api.wsgi.application'


# Database
# https://docs.djangoproject.com/en/3.2/ref/settings/#databases\


DB_HOST = os.environ.get('POSTGRES_HOST')
DB_PORT = os.environ.get('POSTGRES_PORT')
DB_NAME = os.environ.get('POSTGRES_DB')
DB_USER = os.environ.get('POSTGRES_USER')
DB_PASSW = os.environ.get('POSTGRES_PASSWORD')

# Load DBs config: Relational Database
DB_HOST_DICT = {'value': DB_HOST, 'name': 'POSTGRES_HOST'}
DB_PORT_DICT = {'value': DB_PORT, 'name': 'POSTGRES_PORT'}
DB_NAME_DICT = {'value': DB_NAME, 'name': 'POSTGRES_DB'}
DB_USER_DICT = {'value': DB_USER, 'name': 'POSTGRES_USER'}
DB_PASSW_DICT = {'value': DB_PASSW, 'name': 'POSTGRES_PASSWORD'}

DATABASES_CREDENTIALS = [DB_HOST_DICT, DB_PORT_DICT, DB_NAME_DICT, DB_USER_DICT, DB_PASSW_DICT]

for each in DATABASES_CREDENTIALS:
    if not each.get('value'):
        logger.critical(f"{each.get('name')} must be defined in os environment")
        exit(-1)

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': DB_NAME,
        'USER': DB_USER,
        'PASSWORD': DB_PASSW,
        'HOST': DB_HOST,
        'PORT': DB_PORT,
    },
}


# Password validation
# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.2/howto/static-files/

STATIC_URL = '/static/'

# Default primary key field type
# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


# CORS config
cors_origin_whitelist_str = os.environ.get('CORS_ORIGIN_WHITELIST')
CORS_ORIGIN_WHITELIST = cors_origin_whitelist_str.split() if cors_origin_whitelist_str else []

if not CORS_ORIGIN_WHITELIST:
    logger.warning('CORS_ORIGIN_WHITELIST is not defined in os environment.'
                   'It should be a space-delimited url list')

CORS_ORIGIN_ALLOW_ALL = os.environ.get('CORS_ORIGIN_ALLOW_ALL', None)
CORS_ORIGIN_ALLOW_ALL = True if CORS_ORIGIN_ALLOW_ALL else False

if not CORS_ORIGIN_ALLOW_ALL:
    CORS_ALLOWED_ORIGINS = CORS_ORIGIN_WHITELIST

# CORS_ALLOW_ALL_ORIGINS = True

CORS_ALLOWED_HEADERS = [
    'Authorization',
    'Content-Type',
]


# Django REST Framework
PAGE_SIZE = int(os.environ.get('PAGE_SIZE', 10))

REST_FRAMEWORK = {

    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ],
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticated',
    ],
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.LimitOffsetPagination',
    'PAGE_SIZE': PAGE_SIZE,
}
try:
    ACCESS_TOKEN_LIFETIME = int(os.environ.get('ACCESS_TOKEN_LIFETIME', 5))
    REFRESH_TOKEN_LIFETIME = int(os.environ.get('ACCESS_TOKEN_LIFETIME', 1))
except ValueError:
    logger.critical(f"ACCESS_TOKEN_LIFETIME and REFRESH_TOKEN_LIFETIME must be defined numbers not string")
    exit(-1)

SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=ACCESS_TOKEN_LIFETIME),
    'REFRESH_TOKEN_LIFETIME': timedelta(days=REFRESH_TOKEN_LIFETIME),
    # 'ROTATE_REFRESH_TOKENS': True,
    # 'BLACKLIST_AFTER_ROTATION': True
}


CELERY_BROKER_URL = os.environ.get('CELERY_BROKER_URL')
CELERY_RESULT_BACKEND = CELERY_BROKER_URL
CELERY_ACCEPT_CONTENT = ['application/json']
CELERY_RESULT_SERIALIZER = 'json'
CELERY_TASK_SERIALIZER = 'json'
CELERY_TIMEZONE = 'UTC'
CELERY_CONFIG_MODULE = 'device_api.celery_cfg'

CELERY_BEAT_SCHEDULE = {
    'run-task-every-5-seconds': {
        'task': 'tasks.tasks.device_connection_test',  # Ruta a la tarea que deseas ejecutar
        'schedule': 15.0,  # Intervalo de tiempo en segundos
    },
}

SWAGGER_SETTINGS = {
    "SECURITY_DEFINITIONS": {
        "JWT [Bearer {JWT}]": {
            "name": "Authorization",
            "type": "apiKey",
            "in": "header",
        }
    },
    "USE_SESSION_AUTH": False,
}

# Media
MEDIA_ROOT = os.path.join(BASE_DIR, str('media'))
MEDIA_URL = '/media/'

REDIS_URL = os.environ.get('REDIS_URL')
CACHES = {
    'default': {
        'BACKEND': 'django_redis.cache.RedisCache',
        'LOCATION': REDIS_URL,
        'OPTIONS': {
            'CLIENT_CLASS': 'django_redis.client.DefaultClient',
            'IGNORE_EXCEPTIONS': True
        }
    }
}

SESSION_ENGINE = 'django.contrib.sessions.backends.cache'
SESSION_CACHE_ALIAS = 'default'

# Load DBs config: MongoDB
MONGODB_URL = os.environ.get('MONGODB_URL')
MONGODB_USER = os.environ.get('MONGODB_USER')
MONGODB_PASSW = os.environ.get('MONGODB_PASSW')

if not (MONGODB_URL and MONGODB_USER and MONGODB_PASSW):
    logger.error('MONGODB_URL, MONGODB_USER, MONGODB_PASSW must be defined in os environment')
    exit(-1)

mongoengine.connect(host=MONGODB_URL, username=MONGODB_USER, password=MONGODB_PASSW)
